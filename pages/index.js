import Head from 'next/head'
import Image from 'next/image'
import TopButtons from "../components/TopButtons";
import Inputs from "../components/Inputs";
import TimeAndLocation from "../components/TimeAndLocation";
import TemperatureAndDetails from "../components/TemperatureAndDetails";
import Forecast from "../components/Forecast";
import getFormattedWeatherData from "../services/weatherService";
import { useEffect, useState } from "react";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { UilSearch, UilLocationPoint } from "@iconscout/react-unicons";

export default function Home() {


  const [query, setQuery] = useState({ q: "Dharwad" });
  const [units, setUnits] = useState("metric");
  const [weather, setWeather] = useState(null);

  useEffect(() => {
    const fetchWeather = async () => {
      const message = query.q ? query.q : "current location.";

      toast.info("Fetching weather for " + message);

      await getFormattedWeatherData({ ...query, units }).then((data) => {
        toast.success(
          `Successfully fetched weather for ${data.name}, ${data.country}.`
        );

        setWeather(data);
      });
    };

    fetchWeather();
  }, [query, units]);

  const formatBackground = () => {
    if (!weather) return "from-cyan-700 to-blue-700";
    const threshold = units === "metric" ? 20 : 60;
    if (weather.temp <= threshold) return "from-sky-500 to-orange-500";

    return "from-orange-500 to-sky-500";
  };
  const handleLocationClick = () => {
    if (navigator.geolocation) {
      toast.info("Fetching users location.");
      navigator.geolocation.getCurrentPosition((position) => {
        toast.success("Location fetched!");
        let lat = position.coords.latitude;
        let lon = position.coords.longitude;

        setQuery({
          lat,
          lon,
        });
      });
    }
  };
  const handleUnitsChange = (e) => {
    const selectedUnit = e.currentTarget.name;
    if (units !== selectedUnit) setUnits(selectedUnit);
  };

  const handleSearchClick = () => {
    if (city !== "") setQuery({ q: city });
  };


  return (
    <div>
      <Head>
        <title>Weather-Forecast</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div
        className={`mx-auto py-5 px-4 md:py-5 md:px-32 bg-gradient-to-br  h-fit shadow-xl shadow-gray-400 ${formatBackground()}`}
      >
        {/* <TopButtons setQuery={setQuery} /> */}
        <Inputs setQuery={setQuery} units={units} setUnits={setUnits} />

        {weather && (
          <div>
            <TimeAndLocation weather={weather} />
            <div className="flex justify-center">
              <div className="flex flex-row w-1/4 items-center justify-center">
                <UilLocationPoint
                  size={25}
                  className="text-white cursor-pointer transition ease-out hover:scale-125"
                  onClick={handleLocationClick}
                />
                <button
                  name="metric"
                  className="text-xl text-white font-light transition ease-out hover:scale-125"
                  onClick={handleUnitsChange}
                >
                  °C
                </button>
                <p className="text-xl text-white mx-1">|</p>
                <button
                  name="imperial"
                  className="text-xl text-white font-light transition ease-out hover:scale-125"
                  onClick={handleUnitsChange}
                >
                  °F
                </button>
              </div>
            </div>

            <TemperatureAndDetails weather={weather} />
            {/* <div className="h- w-10">
            <Image src="/img1.jpg" alt=""
                 layout="fill" />
            </div> */}

            <Forecast title="hourly forecast" items={weather.hourly} />
            <Forecast title="daily forecast" items={weather.daily} />
          </div>
        )}

        <ToastContainer autoClose={1000} theme="colored" newestOnTop={true} style={{width:"12rem", fontSize:"10px"}} />
      </div>


    </div>
  )
}
